[
  {
    "A_name" : "throwAssertion",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "ThrowAssertion.swift - Line: 7, Column: 1",
    "G_members" : [

    ],
    "I_parameterType" : [

    ],
    "I_parameters" : [

    ],
    "J_returnType" : "-> Predicate<Out>"
  },
  {
    "A_name" : "message",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "ThrowAssertion.swift - Line: 10, Column: 9",
    "H_initialValue" : "ExpectationMessage.expectedTo(\"throw an assertion\")"
  },
  {
    "A_name" : "actualError",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "ThrowAssertion.swift - Line: 12, Column: 9",
    "H_initialValue" : ""
  },
  {
    "A_name" : "caughtException",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "ThrowAssertion.swift - Line: 13, Column: 9",
    "H_initialValue" : "catchBadInstruction {\n            #if os(tvOS)\n                if !NimbleEnvironment.activeInstance.suppressTVOSAssertionWarning {\n                    print()\n                    print(\"[Nimble Warning]: If you're getting stuck on a debugger breakpoint for a \" +\n                        \"fatal error while using throwAssertion(), please disable 'Debug Executable' \" +\n                        \"in your scheme. Go to 'Edit Scheme > Test > Info' and uncheck \" +\n                        \"'Debug Executable'. If you've already done that, suppress this warning \" +\n                        \"by setting `NimbleEnvironment.activeInstance.suppressTVOSAssertionWarning = true`. \" +\n                        \"This is required because the standard methods of catching assertions \" +\n                        \"(mach APIs) are unavailable for tvOS. Instead, the same mechanism the \" +\n                        \"debugger uses is the fallback method for tvOS.\"\n                    )\n                    print()\n                    NimbleEnvironment.activeInstance.suppressTVOSAssertionWarning = true\n                }\n            #endif\n            do {\n                _ = try actualExpression.evaluate()\n            } catch {\n                actualError = error\n            }\n        }"
  }
]