[
  {
    "A_name" : "RetrieveLivePhotoResult",
    "B_kind" : "struct",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [
      "@unchecked Sendable"
    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 29, Column: 1",
    "G_members" : [

    ]
  },
  {
    "A_name" : "RetrieveLivePhotoResult",
    "B_kind" : "struct",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [
      "@unchecked Sendable"
    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 41, Column: 1",
    "G_members" : [
      {
        "A_name" : "loadingInfo",
        "B_kind" : "variable",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 43, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "livePhoto",
        "B_kind" : "variable",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 48, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "info",
        "B_kind" : "variable",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 54, Column: 5",
        "H_initialValue" : ""
      }
    ]
  },
  {
    "A_name" : "loadingInfo",
    "B_kind" : "variable",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 43, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "livePhoto",
    "B_kind" : "variable",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 48, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "info",
    "B_kind" : "variable",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 54, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "taskIdentifierKey",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [
      "MainActor"
    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 57, Column: 1",
    "H_initialValue" : ""
  },
  {
    "A_name" : "targetSizeKey",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [
      "MainActor"
    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 58, Column: 1",
    "H_initialValue" : ""
  },
  {
    "A_name" : "contentModeKey",
    "B_kind" : "variable",
    "C_accessLevel" : "private",
    "D_attributes" : [
      "MainActor"
    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 59, Column: 1",
    "H_initialValue" : ""
  },
  {
    "A_name" : "KingfisherWrapper",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [
      "MainActor"
    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 61, Column: 1",
    "G_members" : [
      {
        "A_name" : "taskIdentifier",
        "B_kind" : "variable",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 64, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "targetSize",
        "B_kind" : "variable",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 80, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "contentMode",
        "B_kind" : "variable",
        "C_accessLevel" : "public",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 90, Column: 5",
        "H_initialValue" : ""
      },
      {
        "A_name" : "setImage",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [
          "discardableResult"
        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 129, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [
          "[URL]",
          "KingfisherOptionsInfo?",
          "(@MainActor @Sendable (Result<RetrieveLivePhotoResult, KingfisherError>) -> Void)?"
        ],
        "I_parameters" : [
          "with",
          "options",
          "completionHandler"
        ],
        "J_returnType" : "-> Task<(), Never>?"
      },
      {
        "A_name" : "setImage",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [
          "discardableResult"
        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 173, Column: 5",
        "G_members" : [
          {
            "A_name" : "mutatingSelf",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 181, Column: 9",
            "H_initialValue" : "self"
          },
          {
            "A_name" : "issuedIdentifier",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 191, Column: 9",
            "H_initialValue" : "Source.Identifier.next()"
          },
          {
            "A_name" : "taskIdentifierChecking",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 194, Column: 9",
            "H_initialValue" : "{ issuedIdentifier == self.taskIdentifier }"
          },
          {
            "A_name" : "targetSize",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 197, Column: 9",
            "H_initialValue" : "targetSize"
          },
          {
            "A_name" : "contentMode",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 198, Column: 9",
            "H_initialValue" : "contentMode"
          },
          {
            "A_name" : "task",
            "B_kind" : "variable",
            "C_accessLevel" : "internal",
            "D_attributes" : [

            ],
            "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 200, Column: 9",
            "H_initialValue" : "Task { @MainActor in\n            do {\n                let loadingInfo = try await KingfisherManager.shared.retrieveLivePhoto(\n                    with: source,\n                    options: options,\n                    progressBlock: nil, \/\/ progressBlock, \/\/ Not supported yet\n                    referenceTaskIdentifierChecker: taskIdentifierChecking\n                )\n                if let notCurrentTaskError = self.checkNotCurrentTask(\n                    issuedIdentifier: issuedIdentifier,\n                    result: .init(loadingInfo: loadingInfo, livePhoto: nil, info: nil),\n                    error: nil,\n                    source: source\n                ) {\n                    completionHandler?(.failure(notCurrentTaskError))\n                    return\n                }\n                \n                PHLivePhoto.request(\n                    withResourceFileURLs: loadingInfo.fileURLs,\n                    placeholderImage: nil,\n                    targetSize: targetSize,\n                    contentMode: contentMode,\n                    resultHandler: { livePhoto, info in\n                        let result = RetrieveLivePhotoResult(\n                            loadingInfo: loadingInfo,\n                            livePhoto: livePhoto,\n                            info: info\n                        )\n                        \n                        if let notCurrentTaskError = self.checkNotCurrentTask(\n                            issuedIdentifier: issuedIdentifier,\n                            result: result,\n                            error: nil,\n                            source: source\n                        ) {\n                            completionHandler?(.failure(notCurrentTaskError))\n                            return\n                        }\n                        \n                        base.livePhoto = livePhoto\n                        \n                        if let error = info[PHLivePhotoInfoErrorKey] as? NSError {\n                            let failingReason: KingfisherError.ImageSettingErrorReason =\n                                .livePhotoResultError(result: result, error: error, source: source)\n                            completionHandler?(.failure(.imageSettingError(reason: failingReason)))\n                            return\n                        }\n                        \n                        \/\/ Since we are not returning the request ID, seems no way for user to cancel it if the \n                        \/\/ `request` method is called. However, we are sure the request method will always load the \n                        \/\/ image from disk, it should not be a problem. In case we still report the error in the \n                        \/\/ completion\n                        if (info[PHLivePhotoInfoCancelledKey] as? NSNumber)?.boolValue ?? false {\n                            completionHandler?(.failure(\n                                .requestError(reason: .livePhotoTaskCancelled(source: source)))\n                            )\n                            return\n                        }\n                        \n                        \/\/ If the PHLivePhotoInfoIsDegradedKey value in your result handler’s info dictionary is true,\n                        \/\/ Photos will call your result handler again.\n                        if (info[PHLivePhotoInfoIsDegradedKey] as? NSNumber)?.boolValue == true {\n                            \/\/ This ensures `completionHandler` be only called once.\n                            return\n                        }\n                        \n                        completionHandler?(.success(result))\n                    }\n                )\n            } catch {\n                if let notCurrentTaskError = self.checkNotCurrentTask(\n                    issuedIdentifier: issuedIdentifier,\n                    result: nil,\n                    error: error,\n                    source: source\n                ) {\n                    completionHandler?(.failure(notCurrentTaskError))\n                    return\n                }\n                \n                if let kfError = error as? KingfisherError {\n                    completionHandler?(.failure(kfError))\n                } else if error is CancellationError {\n                    completionHandler?(.failure(.requestError(reason: .livePhotoTaskCancelled(source: source))))\n                } else {\n                    completionHandler?(.failure(.imageSettingError(\n                        reason: .livePhotoResultError(result: nil, error: error, source: source)))\n                    )\n                }\n            }\n        }"
          }
        ],
        "I_parameterType" : [
          "LivePhotoSource?",
          "KingfisherOptionsInfo?",
          "(@MainActor @Sendable (Result<RetrieveLivePhotoResult, KingfisherError>) -> Void)?"
        ],
        "I_parameters" : [
          "with",
          "options",
          "completionHandler"
        ],
        "J_returnType" : "-> Task<(), Never>?"
      },
      {
        "A_name" : "checkNotCurrentTask",
        "B_kind" : "function",
        "C_accessLevel" : "private",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 296, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [
          "Source.Identifier.Value",
          "RetrieveLivePhotoResult?",
          "(any Error)?",
          "LivePhotoSource"
        ],
        "I_parameters" : [
          "issuedIdentifier",
          "result",
          "error",
          "source"
        ],
        "J_returnType" : "-> KingfisherError?"
      }
    ]
  },
  {
    "A_name" : "taskIdentifier",
    "B_kind" : "variable",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 64, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "box",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 66, Column: 13",
    "H_initialValue" : "getAssociatedObject(base, &taskIdentifierKey)"
  },
  {
    "A_name" : "box",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 70, Column: 13",
    "H_initialValue" : "newValue.map { Box($0) }"
  },
  {
    "A_name" : "targetSize",
    "B_kind" : "variable",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 80, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "contentMode",
    "B_kind" : "variable",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 90, Column: 5",
    "H_initialValue" : ""
  },
  {
    "A_name" : "setImage",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [
      "discardableResult"
    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 129, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [
      "[URL]",
      "KingfisherOptionsInfo?",
      "(@MainActor @Sendable (Result<RetrieveLivePhotoResult, KingfisherError>) -> Void)?"
    ],
    "I_parameters" : [
      "with",
      "options",
      "completionHandler"
    ],
    "J_returnType" : "-> Task<(), Never>?"
  },
  {
    "A_name" : "setImage",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [
      "discardableResult"
    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 173, Column: 5",
    "G_members" : [
      {
        "A_name" : "mutatingSelf",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 181, Column: 9",
        "H_initialValue" : "self"
      },
      {
        "A_name" : "issuedIdentifier",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 191, Column: 9",
        "H_initialValue" : "Source.Identifier.next()"
      },
      {
        "A_name" : "taskIdentifierChecking",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 194, Column: 9",
        "H_initialValue" : "{ issuedIdentifier == self.taskIdentifier }"
      },
      {
        "A_name" : "targetSize",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 197, Column: 9",
        "H_initialValue" : "targetSize"
      },
      {
        "A_name" : "contentMode",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 198, Column: 9",
        "H_initialValue" : "contentMode"
      },
      {
        "A_name" : "task",
        "B_kind" : "variable",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 200, Column: 9",
        "H_initialValue" : "Task { @MainActor in\n            do {\n                let loadingInfo = try await KingfisherManager.shared.retrieveLivePhoto(\n                    with: source,\n                    options: options,\n                    progressBlock: nil, \/\/ progressBlock, \/\/ Not supported yet\n                    referenceTaskIdentifierChecker: taskIdentifierChecking\n                )\n                if let notCurrentTaskError = self.checkNotCurrentTask(\n                    issuedIdentifier: issuedIdentifier,\n                    result: .init(loadingInfo: loadingInfo, livePhoto: nil, info: nil),\n                    error: nil,\n                    source: source\n                ) {\n                    completionHandler?(.failure(notCurrentTaskError))\n                    return\n                }\n                \n                PHLivePhoto.request(\n                    withResourceFileURLs: loadingInfo.fileURLs,\n                    placeholderImage: nil,\n                    targetSize: targetSize,\n                    contentMode: contentMode,\n                    resultHandler: { livePhoto, info in\n                        let result = RetrieveLivePhotoResult(\n                            loadingInfo: loadingInfo,\n                            livePhoto: livePhoto,\n                            info: info\n                        )\n                        \n                        if let notCurrentTaskError = self.checkNotCurrentTask(\n                            issuedIdentifier: issuedIdentifier,\n                            result: result,\n                            error: nil,\n                            source: source\n                        ) {\n                            completionHandler?(.failure(notCurrentTaskError))\n                            return\n                        }\n                        \n                        base.livePhoto = livePhoto\n                        \n                        if let error = info[PHLivePhotoInfoErrorKey] as? NSError {\n                            let failingReason: KingfisherError.ImageSettingErrorReason =\n                                .livePhotoResultError(result: result, error: error, source: source)\n                            completionHandler?(.failure(.imageSettingError(reason: failingReason)))\n                            return\n                        }\n                        \n                        \/\/ Since we are not returning the request ID, seems no way for user to cancel it if the \n                        \/\/ `request` method is called. However, we are sure the request method will always load the \n                        \/\/ image from disk, it should not be a problem. In case we still report the error in the \n                        \/\/ completion\n                        if (info[PHLivePhotoInfoCancelledKey] as? NSNumber)?.boolValue ?? false {\n                            completionHandler?(.failure(\n                                .requestError(reason: .livePhotoTaskCancelled(source: source)))\n                            )\n                            return\n                        }\n                        \n                        \/\/ If the PHLivePhotoInfoIsDegradedKey value in your result handler’s info dictionary is true,\n                        \/\/ Photos will call your result handler again.\n                        if (info[PHLivePhotoInfoIsDegradedKey] as? NSNumber)?.boolValue == true {\n                            \/\/ This ensures `completionHandler` be only called once.\n                            return\n                        }\n                        \n                        completionHandler?(.success(result))\n                    }\n                )\n            } catch {\n                if let notCurrentTaskError = self.checkNotCurrentTask(\n                    issuedIdentifier: issuedIdentifier,\n                    result: nil,\n                    error: error,\n                    source: source\n                ) {\n                    completionHandler?(.failure(notCurrentTaskError))\n                    return\n                }\n                \n                if let kfError = error as? KingfisherError {\n                    completionHandler?(.failure(kfError))\n                } else if error is CancellationError {\n                    completionHandler?(.failure(.requestError(reason: .livePhotoTaskCancelled(source: source))))\n                } else {\n                    completionHandler?(.failure(.imageSettingError(\n                        reason: .livePhotoResultError(result: nil, error: error, source: source)))\n                    )\n                }\n            }\n        }"
      }
    ],
    "I_parameterType" : [
      "LivePhotoSource?",
      "KingfisherOptionsInfo?",
      "(@MainActor @Sendable (Result<RetrieveLivePhotoResult, KingfisherError>) -> Void)?"
    ],
    "I_parameters" : [
      "with",
      "options",
      "completionHandler"
    ],
    "J_returnType" : "-> Task<(), Never>?"
  },
  {
    "A_name" : "mutatingSelf",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 181, Column: 9",
    "H_initialValue" : "self"
  },
  {
    "A_name" : "issuedIdentifier",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 191, Column: 9",
    "H_initialValue" : "Source.Identifier.next()"
  },
  {
    "A_name" : "taskIdentifierChecking",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 194, Column: 9",
    "H_initialValue" : "{ issuedIdentifier == self.taskIdentifier }"
  },
  {
    "A_name" : "targetSize",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 197, Column: 9",
    "H_initialValue" : "targetSize"
  },
  {
    "A_name" : "contentMode",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 198, Column: 9",
    "H_initialValue" : "contentMode"
  },
  {
    "A_name" : "task",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 200, Column: 9",
    "H_initialValue" : "Task { @MainActor in\n            do {\n                let loadingInfo = try await KingfisherManager.shared.retrieveLivePhoto(\n                    with: source,\n                    options: options,\n                    progressBlock: nil, \/\/ progressBlock, \/\/ Not supported yet\n                    referenceTaskIdentifierChecker: taskIdentifierChecking\n                )\n                if let notCurrentTaskError = self.checkNotCurrentTask(\n                    issuedIdentifier: issuedIdentifier,\n                    result: .init(loadingInfo: loadingInfo, livePhoto: nil, info: nil),\n                    error: nil,\n                    source: source\n                ) {\n                    completionHandler?(.failure(notCurrentTaskError))\n                    return\n                }\n                \n                PHLivePhoto.request(\n                    withResourceFileURLs: loadingInfo.fileURLs,\n                    placeholderImage: nil,\n                    targetSize: targetSize,\n                    contentMode: contentMode,\n                    resultHandler: { livePhoto, info in\n                        let result = RetrieveLivePhotoResult(\n                            loadingInfo: loadingInfo,\n                            livePhoto: livePhoto,\n                            info: info\n                        )\n                        \n                        if let notCurrentTaskError = self.checkNotCurrentTask(\n                            issuedIdentifier: issuedIdentifier,\n                            result: result,\n                            error: nil,\n                            source: source\n                        ) {\n                            completionHandler?(.failure(notCurrentTaskError))\n                            return\n                        }\n                        \n                        base.livePhoto = livePhoto\n                        \n                        if let error = info[PHLivePhotoInfoErrorKey] as? NSError {\n                            let failingReason: KingfisherError.ImageSettingErrorReason =\n                                .livePhotoResultError(result: result, error: error, source: source)\n                            completionHandler?(.failure(.imageSettingError(reason: failingReason)))\n                            return\n                        }\n                        \n                        \/\/ Since we are not returning the request ID, seems no way for user to cancel it if the \n                        \/\/ `request` method is called. However, we are sure the request method will always load the \n                        \/\/ image from disk, it should not be a problem. In case we still report the error in the \n                        \/\/ completion\n                        if (info[PHLivePhotoInfoCancelledKey] as? NSNumber)?.boolValue ?? false {\n                            completionHandler?(.failure(\n                                .requestError(reason: .livePhotoTaskCancelled(source: source)))\n                            )\n                            return\n                        }\n                        \n                        \/\/ If the PHLivePhotoInfoIsDegradedKey value in your result handler’s info dictionary is true,\n                        \/\/ Photos will call your result handler again.\n                        if (info[PHLivePhotoInfoIsDegradedKey] as? NSNumber)?.boolValue == true {\n                            \/\/ This ensures `completionHandler` be only called once.\n                            return\n                        }\n                        \n                        completionHandler?(.success(result))\n                    }\n                )\n            } catch {\n                if let notCurrentTaskError = self.checkNotCurrentTask(\n                    issuedIdentifier: issuedIdentifier,\n                    result: nil,\n                    error: error,\n                    source: source\n                ) {\n                    completionHandler?(.failure(notCurrentTaskError))\n                    return\n                }\n                \n                if let kfError = error as? KingfisherError {\n                    completionHandler?(.failure(kfError))\n                } else if error is CancellationError {\n                    completionHandler?(.failure(.requestError(reason: .livePhotoTaskCancelled(source: source))))\n                } else {\n                    completionHandler?(.failure(.imageSettingError(\n                        reason: .livePhotoResultError(result: nil, error: error, source: source)))\n                    )\n                }\n            }\n        }"
  },
  {
    "A_name" : "loadingInfo",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 202, Column: 17",
    "H_initialValue" : "try await KingfisherManager.shared.retrieveLivePhoto(\n                    with: source,\n                    options: options,\n                    progressBlock: nil, \/\/ progressBlock, \/\/ Not supported yet\n                    referenceTaskIdentifierChecker: taskIdentifierChecking\n                )"
  },
  {
    "A_name" : "result",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 224, Column: 25",
    "H_initialValue" : "RetrieveLivePhotoResult(\n                            loadingInfo: loadingInfo,\n                            livePhoto: livePhoto,\n                            info: info\n                        )"
  },
  {
    "A_name" : "failingReason",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 243, Column: 29",
    "H_initialValue" : ".livePhotoResultError(result: result, error: error, source: source)"
  },
  {
    "A_name" : "checkNotCurrentTask",
    "B_kind" : "function",
    "C_accessLevel" : "private",
    "D_attributes" : [

    ],
    "F_location" : "PHLivePhotoView+Kingfisher.swift - Line: 296, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [
      "Source.Identifier.Value",
      "RetrieveLivePhotoResult?",
      "(any Error)?",
      "LivePhotoSource"
    ],
    "I_parameters" : [
      "issuedIdentifier",
      "result",
      "error",
      "source"
    ],
    "J_returnType" : "-> KingfisherError?"
  }
]