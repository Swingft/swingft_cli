[
  {
    "A_name" : "satisfyAnyOf",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 3, Column: 1",
    "G_members" : [

    ],
    "I_parameterType" : [
      "Predicate<T>"
    ],
    "I_parameters" : [
      "_"
    ],
    "J_returnType" : "-> Predicate<T>"
  },
  {
    "A_name" : "satisfyAnyOf",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [
      "available"
    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 9, Column: 1",
    "G_members" : [

    ],
    "I_parameterType" : [
      "U"
    ],
    "I_parameters" : [
      "_"
    ],
    "J_returnType" : "-> Predicate<T>"
  },
  {
    "A_name" : "satisfyAnyOf",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 17, Column: 1",
    "G_members" : [

    ],
    "I_parameterType" : [
      "[Predicate<T>]"
    ],
    "I_parameters" : [
      "_"
    ],
    "J_returnType" : "-> Predicate<T>"
  },
  {
    "A_name" : "postfixMessages",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 19, Column: 13",
    "H_initialValue" : "[String]()"
  },
  {
    "A_name" : "status",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 20, Column: 13",
    "H_initialValue" : ".doesNotMatch"
  },
  {
    "A_name" : "result",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 22, Column: 17",
    "H_initialValue" : "try predicate.satisfies(actualExpression)"
  },
  {
    "A_name" : "msg",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 31, Column: 13",
    "H_initialValue" : ""
  },
  {
    "A_name" : "||",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 47, Column: 1",
    "G_members" : [

    ],
    "I_parameterType" : [
      "Predicate<T>",
      "Predicate<T>"
    ],
    "I_parameters" : [
      "left",
      "right"
    ],
    "J_returnType" : "-> Predicate<T>"
  },
  {
    "A_name" : "||",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [
      "available"
    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 51, Column: 1",
    "G_members" : [

    ],
    "I_parameterType" : [
      "NonNilMatcherFunc<T>",
      "NonNilMatcherFunc<T>"
    ],
    "I_parameters" : [
      "left",
      "right"
    ],
    "J_returnType" : "-> Predicate<T>"
  },
  {
    "A_name" : "||",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [
      "available"
    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 56, Column: 1",
    "G_members" : [

    ],
    "I_parameterType" : [
      "MatcherFunc<T>",
      "MatcherFunc<T>"
    ],
    "I_parameters" : [
      "left",
      "right"
    ],
    "J_returnType" : "-> Predicate<T>"
  },
  {
    "A_name" : "NMBPredicate",
    "B_kind" : "extension",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 64, Column: 1",
    "G_members" : [
      {
        "A_name" : "satisfyAnyOfMatcher",
        "B_kind" : "function",
        "C_accessLevel" : "public",
        "D_attributes" : [
          "objc",
          "class"
        ],
        "F_location" : "SatisfyAnyOf.swift - Line: 65, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [
          "[NMBMatcher]"
        ],
        "I_parameters" : [
          "_"
        ],
        "J_returnType" : "-> NMBPredicate"
      }
    ]
  },
  {
    "A_name" : "satisfyAnyOfMatcher",
    "B_kind" : "function",
    "C_accessLevel" : "public",
    "D_attributes" : [
      "objc",
      "class"
    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 65, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [
      "[NMBMatcher]"
    ],
    "I_parameters" : [
      "_"
    ],
    "J_returnType" : "-> NMBPredicate"
  },
  {
    "A_name" : "elementEvaluators",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 76, Column: 13",
    "H_initialValue" : "[Predicate<NSObject>]()"
  },
  {
    "A_name" : "elementEvaluator",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 78, Column: 17",
    "H_initialValue" : "Predicate<NSObject> { expression in\n                    if let predicate = matcher as? NMBPredicate {\n                        return predicate.satisfies({ try expression.evaluate() }, location: actualExpression.location).toSwift()\n                    } else {\n                        let failureMessage = FailureMessage()\n                        let success = matcher.matches(\n                            \/\/ swiftlint:disable:next force_try\n                            { try! expression.evaluate() },\n                            failureMessage: failureMessage,\n                            location: actualExpression.location\n                        )\n                        return PredicateResult(bool: success, message: failureMessage.toExpectationMessage())\n                    }\n                }"
  },
  {
    "A_name" : "failureMessage",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 82, Column: 25",
    "H_initialValue" : "FailureMessage()"
  },
  {
    "A_name" : "success",
    "B_kind" : "variable",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "SatisfyAnyOf.swift - Line: 83, Column: 25",
    "H_initialValue" : "matcher.matches(\n                            \/\/ swiftlint:disable:next force_try\n                            { try! expression.evaluate() },\n                            failureMessage: failureMessage,\n                            location: actualExpression.location\n                        )"
  }
]