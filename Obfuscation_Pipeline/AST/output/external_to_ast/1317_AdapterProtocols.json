[
  {
    "A_name" : "AssertionHandler",
    "B_kind" : "protocol",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "E_adoptedClassProtocols" : [

    ],
    "F_location" : "AdapterProtocols.swift - Line: 2, Column: 1",
    "G_members" : [
      {
        "A_name" : "assert",
        "B_kind" : "function",
        "C_accessLevel" : "internal",
        "D_attributes" : [

        ],
        "F_location" : "AdapterProtocols.swift - Line: 3, Column: 5",
        "G_members" : [

        ],
        "I_parameterType" : [
          "Bool",
          "FailureMessage",
          "SourceLocation"
        ],
        "I_parameters" : [
          "_",
          "message",
          "location"
        ]
      }
    ]
  },
  {
    "A_name" : "assert",
    "B_kind" : "function",
    "C_accessLevel" : "internal",
    "D_attributes" : [

    ],
    "F_location" : "AdapterProtocols.swift - Line: 3, Column: 5",
    "G_members" : [

    ],
    "I_parameterType" : [
      "Bool",
      "FailureMessage",
      "SourceLocation"
    ],
    "I_parameters" : [
      "_",
      "message",
      "location"
    ]
  },
  {
    "A_name" : "NimbleAssertionHandler",
    "B_kind" : "variable",
    "C_accessLevel" : "public",
    "D_attributes" : [

    ],
    "F_location" : "AdapterProtocols.swift - Line: 13, Column: 1",
    "H_initialValue" : "{ () -> AssertionHandler in\n    \/\/ swiftlint:disable:previous identifier_name\n    return isXCTestAvailable() ? NimbleXCTestHandler() : NimbleXCTestUnavailableHandler()\n}()"
  }
]