{
  "instruction": "In the following Swift code, find all identifiers related to sensitive logic. Provide the names and reasoning as a JSON object.",
  "input": "**Swift Source Code:**\n```swift\n//\n//  ChooseViewController.swift\n//  StealPlateSwift\n//\n//  Created by 스틸리언 on 2022/08/12.\n//\n\nimport UIKit\nimport SnapKit\nimport RxSwift\nimport RxCocoa\n\nclass ChooseViewController: BaseViewController {\n    let viewModel: ChooseViewModel = DependencyInjector.chooseViewModel()\n    \n    // MARK: - View\n    lazy var collectionView: UICollectionView = {\n        let cellWidth = ((Int(UIScreen.main.bounds.width) - 32) / NumberConstants.collectionViewCellWidthCount) - 8\n        \n        let layout = UICollectionViewFlowLayout()\n        layout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 100, right: 0)\n        layout.headerReferenceSize = CGSize(width: 0, height: 164)\n        layout.itemSize = CGSize(width: cellWidth, height: cellWidth + 60)\n        \n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.backgroundColor = .black\n        collectionView.showsVerticalScrollIndicator = false\n        collectionView.showsHorizontalScrollIndicator = false\n        collectionView.register(ChooseCollectionViewCell.self, forCellWithReuseIdentifier: ChooseCollectionViewCell.reuseIdentifier)\n        \n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        \n        return collectionView\n    }()\n    \n    lazy var collectionViewHeaderLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.collectionViewHeaderLabelSize))\n        label.textColor = .white\n        label.text = StringConstants.chooseYourFeelings\n        \n        label.translatesAutoresizingMaskIntoConstraints = false\n        \n        return label\n    }()\n    \n    lazy var doneButton: UIButton = {\n        let button = UIButton()\n        button.backgroundColor = .white\n        button.setTitle(StringConstants.doneUpper, for: .normal)\n        button.titleLabel?.font = .boldSystemFont(ofSize: 17)\n        button.setTitleColor(.black, for: .normal)\n        button.setRounded(35)\n        button.addTarget(self, action: #selector(onTapDoneButton(_:)), for: .touchUpInside)\n        \n        button.translatesAutoresizingMaskIntoConstraints = false\n        \n        return button\n    }()\n    \n    // MARK: - Override func\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n    }\n    \n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        \n        self.navigationController?.navigationBar.isHidden = true\n    }\n    \n    override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        \n        if collectionView.layer.mask == nil {\n            let maskLayer = CAGradientLayer.init()\n            maskLayer.locations = [0.0, 0.2, 0.8, 1.0]\n            maskLayer.bounds = CGRect(x: 0, y: 0, width: collectionView.frame.size.width, height: collectionView.frame.size.height)\n            maskLayer.anchorPoint = .zero\n            \n            collectionView.layer.mask = maskLayer\n        }\n        \n        collectionView.delegate?.scrollViewDidScroll?(collectionView)\n    }\n    \n    override func setupVC() {\n        super.setupVC()\n\n        view.addSubview(collectionView)\n        view.addSubview(doneButton)\n        \n        collectionView.snp.makeConstraints { make in\n            make.top.equalToSuperview().offset(NumberConstants.topSafeAreaHeight)\n            make.bottom.equalToSuperview().offset(-NumberConstants.bottomSafeAreaHeight)\n            make.leading.equalToSuperview().offset(NumberConstants.layoutMarginMin)\n            make.trailing.equalToSuperview().offset(-NumberConstants.layoutMarginMin)\n        }\n        \n        doneButton.snp.makeConstraints { make in\n            make.bottom.equalToSuperview().offset(-NumberConstants.bottomSafeAreaHeight)\n            make.leading.equalToSuperview().offset(NumberConstants.layoutMarginMidium)\n            make.trailing.equalToSuperview().offset(-NumberConstants.layoutMarginMidium)\n            make.height.equalTo(70)\n        }\n        \n        collectionView.addSubview(collectionViewHeaderLabel)\n        \n        collectionViewHeaderLabel.snp.makeConstraints { make in\n            make.top.equalToSuperview()\n            make.leading.equalToSuperview().offset(NumberConstants.layoutMarginMidium)\n            make.trailing.equalToSuperview().offset(-NumberConstants.layoutMarginMidium)\n            make.height.equalTo(164)\n            make.width.equalToSuperview().offset(-NumberConstants.layoutMarginExtra)\n        }\n    }\n    \n    override func setupVM() {\n        super.setupVM()\n        \n        viewModel.loadFeelings()\n    }\n    \n    override func setupBind() {\n        super.setupBind()\n        \n        viewModel.feelingsSequence\n            .bind(to: collectionView.rx.items(cellIdentifier: ChooseCollectionViewCell.reuseIdentifier, cellType: ChooseCollectionViewCell.self)) { [unowned self] in\n                $2.data = $1\n                \n                if viewModel.selectedFeelings().count < 3 {\n                    doneButton.setTitleColor(.gray, for: .normal)\n                } else {\n                    doneButton.setTitleColor(.black, for: .normal)\n                }\n            }\n            .disposed(by: disposeBag)\n        \n        collectionView.rx.itemSelected\n            .subscribe(onNext: { self.viewModel.didSelectFeeling($0.row) })\n            .disposed(by: disposeBag)\n        \n        collectionView.rx.didScroll.subscribe(onNext: {\n            self.setCollectionViewBottomShadow()\n        }).disposed(by: disposeBag)\n    }\n    \n    // MARK: - Objc func\n    @objc func onTapDoneButton(_ sender: UIButton) {\n        if viewModel.selectedFeelings().count < 3 {\n            return\n        }\n        \n        let mainVC = MainViewController()\n        let mainVCBackBarButtonItem: UIBarButtonItem = {\n            let buttonItem = UIBarButtonItem()\n            \n            buttonItem.tintColor = .white\n            \n            return buttonItem\n        }()\n        \n        self.navigationController?.pushViewController(mainVC, animated: true)\n        self.navigationItem.backBarButtonItem = mainVCBackBarButtonItem\n//        mainVC.viewModel.selectedFeelings = self.viewModel.selectedFeelings()\n//        mainVC.viewModel.seletedFeelingsSequence.accept(self.viewModel.selectedFeelings())\n        \n//        let vc = ResultViewController()\n//        vc.modalPresentationStyle = .fullScreen\n//\n//        navigationController?.pushViewController(vc, animated: true)\n        \n    }\n    \n    // MARK: - Private func\n    private func setCollectionViewBottomShadow() {\n        let outerColor = UIColor.init(white: 1.0, alpha: 0.0).cgColor\n        let innerColor = UIColor.init(white: 1.0, alpha: 1.0).cgColor\n        var colors: [CGColor]\n        \n        if collectionView.contentOffset.y + collectionView.contentInset.top <= 0 {\n            colors = [innerColor, innerColor, innerColor, outerColor]\n        } else if collectionView.contentOffset.y + collectionView.frame.size.height >= collectionView.contentSize.height - 1 {\n            colors = [innerColor, innerColor, innerColor, innerColor]\n        } else {\n            colors = [innerColor, innerColor, innerColor, outerColor]\n        }\n        \n        (collectionView.layer.mask as? CAGradientLayer)?.colors = colors\n        \n        CATransaction.begin()\n        CATransaction.setDisableActions(true)\n        collectionView.layer.mask?.position = CGPoint(x: 0, y: collectionView.contentOffset.y)\n        CATransaction.commit()\n    }\n}\n```\n\n**AST Symbol Information (JSON):**\n```\n[\n  {\n    \"symbolName\": \"ChooseViewController\",\n    \"symbolKind\": \"class\"\n  },\n  {\n    \"symbolName\": \"override\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewDidLoad()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewWillAppear(_ animated: Bool)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewDidLayoutSubviews()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupVC()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupVM()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupBind()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"onTapDoneButton(_ sender: UIButton)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"private\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setCollectionViewBottomShadow()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewModel\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"collectionView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"cellWidth\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"layout\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"collectionViewHeaderLabel\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"label\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"doneButton\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"button\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"maskLayer\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"mainVC\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"mainVCBackBarButtonItem\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"buttonItem\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"vc\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"outerColor\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"innerColor\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"colors\",\n    \"symbolKind\": \"variable\"\n  }\n]\n```"
}