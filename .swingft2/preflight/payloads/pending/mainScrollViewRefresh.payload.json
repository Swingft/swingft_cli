{
  "instruction": "In the following Swift code, find all identifiers related to sensitive logic. Provide the names and reasoning as a JSON object.",
  "input": "**Swift Source Code:**\n```swift\n//\n//  MainViewController.swift\n//  StealPlateSwift\n//\n//  Created by 심재빈 on 2022/09/20.\n//\n\nimport UIKit\nimport SnapKit\nimport RxSwift\nimport RxCocoa\n\n/*\n    UIScrollView\n        - UIScrollView\n            - UIStackView\n        - UITableView\n            - UIView\n            - UICollectionView\n                -UICollectionView Cell (= Restaurant Cell)\n */\n\nclass MainViewController: BaseViewController {\n    let viewModel: MainViewModel = DependencyInjector.mainViewModel()\n    \n    // MARK: - View\n    \n    lazy var mainScrollLoadingView: LoadingView = {\n        let loadingView = LoadingView()\n        \n        return loadingView\n    }()\n    \n    lazy var mainScrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        scrollView.showsHorizontalScrollIndicator = false\n        scrollView.showsVerticalScrollIndicator = false\n        \n        let refreshControl = UIRefreshControl()\n        refreshControl.addTarget(self, action: #selector(mainScrollViewRefresh), for: .valueChanged)\n        refreshControl.tintColor = .white\n        scrollView.refreshControl = refreshControl\n        \n        return scrollView\n    }()\n    \n    lazy var mainScrollContentView: UIView = {\n        let view = UIView()\n        \n        return view\n    }()\n    \n    lazy var selectedFeelingsStackView: UIStackView = {\n        let stackView = UIStackView()\n        \n        stackView.axis = .horizontal\n        stackView.alignment = .center\n        stackView.distribution = .fillEqually\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        \n        return stackView\n    }()\n    \n    lazy var selectedFeelingsStackViewScrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        scrollView.showsHorizontalScrollIndicator = false\n        scrollView.showsVerticalScrollIndicator = false\n        \n        return scrollView\n    }()\n    \n    lazy var settingButton: UIButton = {\n        let button = UIButton()\n        \n        button.setImage(#imageLiteral(resourceName: \"gearshape\"), for: .normal)\n        button.imageView?.contentMode = .scaleAspectFill\n        button.tintColor = .white\n\n        button.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(tapSettingButton(_ :))))\n        \n        return button\n    }()\n    \n    lazy var restaurantTableView: UITableView = {\n        let tableView: UITableView = UITableView()\n\n        tableView.backgroundColor = .clear\n        tableView.isScrollEnabled = false\n        tableView.bounces = false\n        tableView.alwaysBounceVertical = false\n        tableView.alwaysBounceHorizontal = false\n        \n        return tableView\n    }()\n    \n    let restaurantTableViewCellHeight: Int = {\n        var height = 0\n        height += 40\n        height += NumberConstants.layoutMarginMidium\n        height += NumberConstants.layoutMarginExtra\n        height += NumberConstants.restaurantCollectionViewCellSize\n        \n        return height\n    }()\n\n    // MARK: - Override func\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // DEBUG:\n//        viewModel.loadRemoteUrlPresetData()\n//        viewModel.fetchRemoteUrlPresetData()\n//        \n//        let settingView = MainSettingViewController()\n//        settingView.viewModel = self.viewModel\n//        settingView.dismissCompletion = settingViewDismissCompletion\n//        \n//        self.present(settingView, animated: true)\n    }\n    \n    override func viewWillAppear(_ animated: Bool) {\n        self.navigationController?.navigationBar.isHidden = true\n    }\n    \n    override var preferredStatusBarStyle: UIStatusBarStyle {\n        .lightContent\n    }\n    \n    override func setupVC() {\n        super.setupVC()\n        \n        view.backgroundColor = .black\n//        view.addSubview(mainScrollView)\n        \n        setupAntiCaptureView()\n        antiCaptureView.backgroundColor = .black\n        antiCaptureView.addSubview(mainScrollView)\n        \n        mainScrollView.addSubview(mainScrollContentView)\n        \n        mainScrollContentView.addSubview(selectedFeelingsStackViewScrollView)\n        selectedFeelingsStackViewScrollView.addSubview(selectedFeelingsStackView)\n        \n        mainScrollContentView.addSubview(settingButton)\n        \n        mainScrollContentView.addSubview(restaurantTableView)\n        \n        mainScrollView.snp.makeConstraints { make in\n            make.top.equalToSuperview().offset(NumberConstants.topSafeAreaHeight)\n            make.bottom.equalToSuperview().offset(NumberConstants.bottomSafeAreaHeight)\n            make.leading.trailing.equalToSuperview()\n        }\n        \n        mainScrollContentView.snp.makeConstraints { make in\n            make.top.bottom.leading.equalTo(mainScrollView)\n            make.width.equalToSuperview()\n        }\n        \n        selectedFeelingsStackViewScrollView.snp.makeConstraints { make in\n            make.top.equalToSuperview()\n            make.leading.equalToSuperview().offset(NumberConstants.layoutMarginMidium)\n            make.height.equalTo(selectedFeelingsStackView)\n            make.width.equalToSuperview()\n        }\n        \n        settingButton.snp.makeConstraints { make in\n            make.top.equalTo(selectedFeelingsStackView)\n            make.trailing.equalToSuperview().offset(-NumberConstants.layoutMarginMidium)\n            make.height.equalTo(24)\n        }\n\n        selectedFeelingsStackView.snp.makeConstraints { make in\n            make.top.leading.equalToSuperview()\n        }\n\n        restaurantTableView.snp.makeConstraints { make in\n            make.top.equalTo(selectedFeelingsStackViewScrollView.snp.bottom).offset(NumberConstants.layoutMarginMidium)\n            make.bottom.equalToSuperview()\n            make.leading.equalToSuperview().offset(NumberConstants.layoutMarginMidium)\n            make.trailing.equalToSuperview()\n            make.height.equalTo(restaurantTableViewCellHeight * viewModel.getRestaurantCategoryArrayCount())\n        }\n\n    }\n    \n    override func setupVM() {\n        super.setupVM()\n        \n        viewModel.loadRestaurants(needRefresh: true)\n        viewModel.loadFeelings()\n        viewModel.loadRemoteUrlPresetData()\n        \n        viewModel.disappearMainScrollLoadingView = self.disappearMainScrollLoadingView\n    }\n    \n    override func setupBind() {\n        super.setupBind()\n        \n        viewModel.seletedFeelingsSequence.bind(onNext: { (items) in\n            \n            items.forEach { item in\n                let subView = SelectedFeelingsCollectionViewContentView()\n                subView.data = item\n                \n                self.selectedFeelingsStackView.addArrangedSubview(subView)\n            }\n        \n            self.selectedFeelingsStackViewScrollView.contentSize.width = CGFloat(NumberConstants.selectedFeelingsCollectionViewCellImageSize * items.count + NumberConstants.layoutMarginMidium)\n\n        }).disposed(by: disposeBag)\n\n        restaurantTableView.register(RestaurantTableViewCell.self, forCellReuseIdentifier: RestaurantTableViewCell.reuseIdentifier)\n        \n        viewModel.restaurantCategoryItems.bind(to: restaurantTableView.rx.items(cellIdentifier: RestaurantTableViewCell.reuseIdentifier, cellType: RestaurantTableViewCell.self)) { (row, item, cell) in\n            \n            cell.restaurantItemsData = item.items.data!\n            cell.onSelectRestaurant = self.onSelectRestaurant\n            \n            cell.titleLabel.text = item.title\n            cell.selectionStyle = .none\n            \n        }.disposed(by: disposeBag)\n\n        viewModel.fetchSelectedFeelings()\n        viewModel.fetchRestaurantCategoryItems()\n        viewModel.fetchRemoteUrlPresetData()\n    }\n\n    // MARK: - Objc func\n    \n    // MARK: - Private func\n    \n    private func onSelectRestaurant(item: RestaurantItem) {\n        let detailVC = DetailViewController()\n        let detailVCBackBarButtonItem: UIBarButtonItem = {\n            let buttonItem = UIBarButtonItem()\n            \n            //            buttonItem.image = #imageLiteral(resourceName: \"arrow.backward\")\n            buttonItem.tintColor = .white\n            \n            return buttonItem\n        }()\n        \n        self.navigationController?.pushViewController(detailVC, animated: true)\n        self.navigationItem.backBarButtonItem = detailVCBackBarButtonItem\n        detailVC.viewModel.restaurantSequence.accept(item)\n    }\n    \n    private func settingViewDismissCompletion(settingView: MainSettingViewController) {\n        \n        //  Remote URL\n        if settingView.setRemoteUrl != nil {\n            \n            //  TODO: Loading View\n            showMainScrollLoadingView()\n            \n            if settingView.setRemoteUrl!.absoluteString == \"test\" {\n                settingView.setRemoteUrl! = URL(string: StringConstants.remoteRestaurantJsonUrlTest)!\n            }\n            \n            //  https://t.ly/{setRemoteUrl}\n            if settingView.setRemoteUrl!.absoluteString.count == 4 {\n                settingView.setRemoteUrl! = URL(string: StringConstants.remoteRestaurantJsonUrlShortDefault + settingView.setRemoteUrl!.absoluteString)!\n            }\n            \n//            if settingView.setRemoteUrl!.absoluteString == \"org\" {\n//                settingView.setRemoteUrl! = URL(string: StringConstants.remoteRestaurantJsonUrl)!\n//            }\n            \n            self.viewModel.loadRestaurants(remoteJsonUrl: settingView.setRemoteUrl!, needRefresh: true)\n            self.viewModel.fetchRestaurantCategoryItems()\n        }\n        \n    }\n    \n    private func showMainScrollLoadingView() {\n        DispatchQueue.main.async { [self] in\n            view.addSubview(mainScrollLoadingView)\n            mainScrollLoadingView.snp.makeConstraints { make in\n                make.top.bottom.leading.trailing.equalToSuperview()\n            }\n        }\n    }\n    \n    private func disappearMainScrollLoadingView() {\n        DispatchQueue.main.async { [self] in\n            mainScrollLoadingView.removeFromSuperview()\n        }\n    }\n    \n    @objc\n    private func mainScrollViewRefresh(refreshControl: UIRefreshControl) {\n        print(\"Refresh Restaurant Data\")\n        self.viewModel.mainScrollViewRefreshControl = refreshControl\n        self.viewModel.loadRestaurants(needRefresh: true)\n    }\n    \n    @objc\n    private func tapSettingButton(_ sender: UITapGestureRecognizer) {        viewModel.loadRemoteUrlPresetData()\n        viewModel.fetchRemoteUrlPresetData()\n        \n        let settingView = MainSettingViewController()\n        settingView.viewModel = self.viewModel\n        settingView.dismissCompletion = settingViewDismissCompletion\n        \n        self.present(settingView, animated: true)\n    }\n    \n}\n```\n\n**AST Symbol Information (JSON):**\n```\n[\n  {\n    \"symbolName\": \"MainViewController\",\n    \"symbolKind\": \"class\"\n  },\n  {\n    \"symbolName\": \"override\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewDidLoad()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewWillAppear(_ animated: Bool)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupVC()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupVM()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupBind()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"private\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"onSelectRestaurant(item: RestaurantItem)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"settingViewDismissCompletion(settingView: MainSettingViewController)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"showMainScrollLoadingView()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"disappearMainScrollLoadingView()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"mainScrollViewRefresh(refreshControl: UIRefreshControl)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"tapSettingButton(_ sender: UITapGestureRecognizer)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewModel\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"mainScrollLoadingView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"loadingView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"mainScrollView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"scrollView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"refreshControl\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"mainScrollContentView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"view\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"selectedFeelingsStackView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"stackView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"selectedFeelingsStackViewScrollView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"settingButton\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"button\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"restaurantTableView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"tableView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"restaurantTableViewCellHeight\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"height\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"settingView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"preferredStatusBarStyle\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"subView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"detailVC\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"detailVCBackBarButtonItem\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"buttonItem\",\n    \"symbolKind\": \"variable\"\n  }\n]\n```"
}