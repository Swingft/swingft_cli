{
  "instruction": "In the following Swift code, find all identifiers related to sensitive logic. Provide the names and reasoning as a JSON object.",
  "input": "**Swift Source Code:**\n```swift\n//\n//  AntiCaptureSettingView.swift\n//  StealPlateSwift\n//\n//  Created by 심재빈 on 6/26/24.\n//\n\nimport UIKit\nimport Foundation\n\nclass AntiCaptureSettingView: UIView {\n    private lazy var setAntiCaptureTitleLabel: UILabel = {\n        let label = UILabel()\n        \n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        label.textColor = .black\n        label.text = StringConstants.setAntiCaptureViewTitle\n\n        return label\n    }()\n    \n    private lazy var antiCaptureSegmentControl: UISegmentedControl = {\n        let segmentControl = UISegmentedControl()\n        \n        segmentControl.insertSegment(withTitle: \"Enable\", at: 0, animated: true)\n        segmentControl.insertSegment(withTitle: \"Disable\", at: 1, animated: true)\n        \n        segmentControl.selectedSegmentIndex = 0\n        \n        segmentControl.addTarget(self, action: #selector(antiCaptureSegmentChanged(_:)), for: .valueChanged)\n        \n        return segmentControl\n    }()\n    \n    private lazy var setAntiCaptureBackgroundColorOfCapturedTitleLabel: UILabel = {\n        let label = UILabel()\n        \n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        label.textColor = .black\n        label.text = StringConstants.setAntiCaptureBackgroundColorOfCapturedTitle\n\n        return label\n    }()\n    \n    private lazy var setAntiCaptureBackgroundColorOfCapturedSegmentControl: UISegmentedControl = {\n        let segmentControl = UISegmentedControl()\n        \n        segmentControl.insertSegment(withTitle: \"Black\", at: 0, animated: true)\n        segmentControl.insertSegment(withTitle: \"System\", at: 1, animated: true)\n        \n        segmentControl.selectedSegmentIndex = 0\n        \n        segmentControl.addTarget(self, action: #selector(antiCaptureBackgroundColorOfCapturedSegmentChanged(_:)), for: .valueChanged)\n        \n        return segmentControl\n    }()\n    \n    private lazy var setAntiCaptureBackgroundColorOfAppSwitcherViewTitleLabel: UILabel = {\n        let label = UILabel()\n        \n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        label.textColor = .black\n        label.text = StringConstants.setAntiCaptureBackgroundColorOfAppSwitcherViewTitle\n\n        return label\n    }()\n    \n    private lazy var setAntiCaptureBackgroundColorOfAppSwitcherViewSegmentedControl: UISegmentedControl = {\n        let segmentControl = UISegmentedControl()\n        \n        segmentControl.insertSegment(withTitle: \"Black\", at: 0, animated: true)\n        segmentControl.insertSegment(withTitle: \"System\", at: 1, animated: true)\n        \n        segmentControl.selectedSegmentIndex = 0\n        \n        segmentControl.addTarget(self, action: #selector(antiCaptureBackgroundColorOfAppSwitcherViewSegmentChanged(_:)), for: .valueChanged)\n        \n        return segmentControl\n    }()\n\n    private lazy var setAntiCaptureDisableAppSwitcherViewOnceTitleLabel: UILabel = {\n        let label = UILabel()\n        \n        label.numberOfLines = 0\n        label.font = .boldSystemFont(ofSize: CGFloat(NumberConstants.settingContentLabelSize))\n        label.textColor = .black\n        label.text = StringConstants.setAntiCaptureDisableAppSwitcherViewOnceTitle\n\n        return label\n    }()\n    \n    private lazy var setAntiCaptureDisableAppSwitcherViewOnceSegmentedControl: UISegmentedControl = {\n        let segmentControl = UISegmentedControl()\n        \n        segmentControl.insertSegment(withTitle: \"Disable\", at: 0, animated: true)\n        segmentControl.insertSegment(withTitle: \"Enable\", at: 1, animated: true)\n        \n        segmentControl.selectedSegmentIndex = 0\n        \n        segmentControl.addTarget(self, action: #selector(antiCaptureDisableAppSwitcherViewOnceSegmentChanged(_:)), for: .valueChanged)\n        \n        return segmentControl\n    }()\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        \n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: .zero)\n\n    }\n    \n    public func setupViews() {\n        addSubview(setAntiCaptureTitleLabel)\n        addSubview(antiCaptureSegmentControl)\n        \n        setAntiCaptureTitleLabel.snp.makeConstraints { make in\n            make.top.equalTo(self.snp.top).offset(NumberConstants.layoutMarginMidium)\n            make.leading.equalToSuperview()\n        }\n        \n        antiCaptureSegmentControl.snp.makeConstraints { make in\n            make.top.equalTo(setAntiCaptureTitleLabel.snp.bottom).offset(NumberConstants.settingContentLayoutMarginMin)\n            make.leading.trailing.equalToSuperview()\n        }\n        \n        antiCaptureSegmentControl.selectedSegmentIndex = BaseViewController.sharedAntiCapture ? 0 : 1\n        \n        addSubview(setAntiCaptureBackgroundColorOfCapturedTitleLabel)\n        addSubview(setAntiCaptureBackgroundColorOfCapturedSegmentControl)\n        \n        setAntiCaptureBackgroundColorOfCapturedTitleLabel.snp.makeConstraints { make in\n            make.top.equalTo(antiCaptureSegmentControl.snp.bottom).offset(NumberConstants.layoutMarginMidium)\n            make.leading.equalToSuperview()\n        }\n        \n        setAntiCaptureBackgroundColorOfCapturedSegmentControl.snp.makeConstraints { make in\n            make.top.equalTo(setAntiCaptureBackgroundColorOfCapturedTitleLabel.snp.bottom).offset(NumberConstants.settingContentLayoutMarginMin)\n            make.leading.trailing.equalToSuperview()\n        }\n        \n        if BaseViewController.sharedBackgroundColorOfCaptured == .black {\n            setAntiCaptureBackgroundColorOfCapturedSegmentControl.selectedSegmentIndex = 0\n        } else if BaseViewController.sharedBackgroundColorOfCaptured == .white {\n            setAntiCaptureBackgroundColorOfCapturedSegmentControl.selectedSegmentIndex = 1\n        }\n        \n        addSubview(setAntiCaptureBackgroundColorOfAppSwitcherViewTitleLabel)\n        addSubview(setAntiCaptureBackgroundColorOfAppSwitcherViewSegmentedControl)\n        \n        setAntiCaptureBackgroundColorOfAppSwitcherViewTitleLabel.snp.makeConstraints { make in\n            make.top.equalTo(setAntiCaptureBackgroundColorOfCapturedSegmentControl.snp.bottom).offset(NumberConstants.layoutMarginMidium)\n            make.leading.equalToSuperview()\n        }\n        \n        setAntiCaptureBackgroundColorOfAppSwitcherViewSegmentedControl.snp.makeConstraints { make in\n            make.top.equalTo(setAntiCaptureBackgroundColorOfAppSwitcherViewTitleLabel.snp.bottom).offset(NumberConstants.settingContentLayoutMarginMin)\n            make.leading.trailing.equalToSuperview()\n        }\n        \n        if BaseViewController.sharedBackgroundColorOfAppSwitcherView == .black {\n            setAntiCaptureBackgroundColorOfAppSwitcherViewSegmentedControl.selectedSegmentIndex = 0\n        } else if BaseViewController.sharedBackgroundColorOfAppSwitcherView == .white {\n            setAntiCaptureBackgroundColorOfAppSwitcherViewSegmentedControl.selectedSegmentIndex = 1\n        }\n        \n        addSubview(setAntiCaptureDisableAppSwitcherViewOnceTitleLabel)\n        addSubview(setAntiCaptureDisableAppSwitcherViewOnceSegmentedControl)\n        \n        setAntiCaptureDisableAppSwitcherViewOnceTitleLabel.snp.makeConstraints { make in\n            make.top.equalTo(setAntiCaptureBackgroundColorOfAppSwitcherViewSegmentedControl.snp.bottom).offset(NumberConstants.layoutMarginMidium)\n            make.leading.equalToSuperview()\n        }\n        \n        setAntiCaptureDisableAppSwitcherViewOnceSegmentedControl.snp.makeConstraints { make in\n            make.top.equalTo(setAntiCaptureDisableAppSwitcherViewOnceTitleLabel.snp.bottom).offset(NumberConstants.settingContentLayoutMarginMin)\n            make.leading.trailing.equalToSuperview()\n        }\n        \n        setAntiCaptureDisableAppSwitcherViewOnceSegmentedControl.selectedSegmentIndex = BaseViewController.sharedDisableAppSwitcherViewOnce ? 1 : 0\n    }\n    \n    \n    @objc private func antiCaptureSegmentChanged(_ sender: UISegmentedControl) {\n        switch sender.selectedSegmentIndex {\n        case 0:\n            BaseViewController.sharedAntiCapture = true\n        case 1:\n            BaseViewController.sharedAntiCapture = false\n        default:\n            break\n        }\n    }\n    \n    @objc private func antiCaptureBackgroundColorOfCapturedSegmentChanged(_ sender: UISegmentedControl) {\n        switch sender.selectedSegmentIndex {\n        case 0:\n            BaseViewController.sharedBackgroundColorOfCaptured = .black\n        case 1:\n            BaseViewController.sharedBackgroundColorOfCaptured = .systemBackground\n        default:\n            break\n        }\n    }\n    \n    @objc private func antiCaptureBackgroundColorOfAppSwitcherViewSegmentChanged(_ sender: UISegmentedControl) {\n        switch sender.selectedSegmentIndex {\n        case 0:\n            BaseViewController.sharedBackgroundColorOfAppSwitcherView = .black\n        case 1:\n            BaseViewController.sharedBackgroundColorOfAppSwitcherView = .systemBackground\n        default:\n            break\n        }\n    }\n    \n    @objc private func antiCaptureDisableAppSwitcherViewOnceSegmentChanged(_ sender: UISegmentedControl) {\n        switch sender.selectedSegmentIndex {\n        case 0:\n            BaseViewController.sharedDisableAppSwitcherViewOnce = false\n        case 1:\n            BaseViewController.sharedDisableAppSwitcherViewOnce = true\n        default:\n            break\n        }\n    }\n    \n}\n```\n\n**AST Symbol Information (JSON):**\n```\n[\n  {\n    \"symbolName\": \"AntiCaptureSettingView\",\n    \"symbolKind\": \"class\"\n  },\n  {\n    \"symbolName\": \"setupViews()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"antiCaptureSegmentChanged(_ sender: UISegmentedControl)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"antiCaptureBackgroundColorOfCapturedSegmentChanged(_ sender: UISegmentedControl)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"antiCaptureBackgroundColorOfAppSwitcherViewSegmentChanged(_ sender: UISegmentedControl)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"antiCaptureDisableAppSwitcherViewOnceSegmentChanged(_ sender: UISegmentedControl)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setAntiCaptureTitleLabel\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"label\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"antiCaptureSegmentControl\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"segmentControl\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"setAntiCaptureBackgroundColorOfCapturedTitleLabel\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"setAntiCaptureBackgroundColorOfCapturedSegmentControl\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"setAntiCaptureBackgroundColorOfAppSwitcherViewTitleLabel\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"setAntiCaptureBackgroundColorOfAppSwitcherViewSegmentedControl\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"setAntiCaptureDisableAppSwitcherViewOnceTitleLabel\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"setAntiCaptureDisableAppSwitcherViewOnceSegmentedControl\",\n    \"symbolKind\": \"variable\"\n  }\n]\n```"
}