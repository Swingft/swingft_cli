{
  "instruction": "In the following Swift code, find all identifiers related to sensitive logic. Provide the names and reasoning as a JSON object.",
  "input": "**Swift Source Code:**\n```swift\n//\n//  RestaurantLocationDetailViewController.swift\n//  StealPlateSwift\n//\n//  Created by 심재빈 on 2023/08/03.\n//\n\nimport UIKit\nimport SnapKit\nimport MapKit\nimport SceneKit\n\nclass RestaurantLocationDetailViewController: BaseViewController {\n    public lazy var viewModel: DetailViewModel = DependencyInjector.detailViewModel()\n    \n    private lazy var contentView: UIView = {\n        let view = UIView()\n        \n        return view\n    }()\n    \n    public lazy var mapView: MKMapView = {\n        let mapView = MKMapView()\n        mapView.showsUserLocation = true\n        mapView.setUserTrackingMode(.follow, animated: true)\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n\n        return mapView\n    }()\n    \n    // MARK: - Override\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n    }\n    \n    override func setupVC() {\n        super.setupVC()\n        \n//        view.addSubview(contentView)\n        setupAntiCaptureView()\n        antiCaptureView.addSubview(contentView)\n        \n        contentView.snp.makeConstraints { make in\n            make.top.bottom.leading.trailing.equalToSuperview()\n        }\n        \n        contentView.addSubview(mapView)\n        mapView.snp.makeConstraints { make in\n            make.top.bottom.leading.trailing.equalToSuperview()\n        }\n    }\n    \n    override func setupVM() {\n        super.setupVM()\n    }\n    \n    override func setupBind() {\n        super.setupBind()\n        \n        viewModel.restaurantSequence\n            .filter{ $0 != nil }\n            .subscribe {\n                \n                guard let data = $0.element else {\n                    return\n                }\n\n                self.mapView.setPlaceMark(address: data?.address ?? \"\", placemarkTitle: data?.restaurant_name ?? StringConstants.safeContent)\n                \n            }\n            .disposed(by: self.disposeBag)\n    }\n    \n//    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n//        self.view.endEditing(true)\n//    }\n    \n}\n```\n\n**AST Symbol Information (JSON):**\n```\n[\n  {\n    \"symbolName\": \"RestaurantLocationDetailViewController\",\n    \"symbolKind\": \"class\"\n  },\n  {\n    \"symbolName\": \"viewDidLoad()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewDidDisappear(_ animated: Bool)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewWillDisappear(_ animated: Bool)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupVC()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupVM()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"setupBind()\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?)\",\n    \"symbolKind\": \"method\"\n  },\n  {\n    \"symbolName\": \"viewModel\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"contentView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"view\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"mapView\",\n    \"symbolKind\": \"variable\"\n  },\n  {\n    \"symbolName\": \"data\",\n    \"symbolKind\": \"variable\"\n  }\n]\n```"
}